// SPDX-FileCopyrightText: 2021 SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/machine-controller-manager-provider-openstack/pkg/client (interfaces: Compute,Network,Storage)
//
// Generated by this command:
//
//	mockgen -copyright_file=../../../hack/LICENSE_HEADER.txt -destination=./mocks.go -package=openstack github.com/gardener/machine-controller-manager-provider-openstack/pkg/client Compute,Network,Storage
//

// Package openstack is a generated GoMock package.
package openstack

import (
	reflect "reflect"

	volumes "github.com/gophercloud/gophercloud/openstack/blockstorage/v3/volumes"
	servers "github.com/gophercloud/gophercloud/openstack/compute/v2/servers"
	ports "github.com/gophercloud/gophercloud/openstack/networking/v2/ports"
	subnets "github.com/gophercloud/gophercloud/openstack/networking/v2/subnets"
	gomock "go.uber.org/mock/gomock"
)

// MockCompute is a mock of Compute interface.
type MockCompute struct {
	ctrl     *gomock.Controller
	recorder *MockComputeMockRecorder
	isgomock struct{}
}

// MockComputeMockRecorder is the mock recorder for MockCompute.
type MockComputeMockRecorder struct {
	mock *MockCompute
}

// NewMockCompute creates a new mock instance.
func NewMockCompute(ctrl *gomock.Controller) *MockCompute {
	mock := &MockCompute{ctrl: ctrl}
	mock.recorder = &MockComputeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompute) EXPECT() *MockComputeMockRecorder {
	return m.recorder
}

// BootFromVolume mocks base method.
func (m *MockCompute) BootFromVolume(opts servers.CreateOptsBuilder) (*servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootFromVolume", opts)
	ret0, _ := ret[0].(*servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BootFromVolume indicates an expected call of BootFromVolume.
func (mr *MockComputeMockRecorder) BootFromVolume(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootFromVolume", reflect.TypeOf((*MockCompute)(nil).BootFromVolume), opts)
}

// CreateServer mocks base method.
func (m *MockCompute) CreateServer(opts servers.CreateOptsBuilder) (*servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", opts)
	ret0, _ := ret[0].(*servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockComputeMockRecorder) CreateServer(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockCompute)(nil).CreateServer), opts)
}

// DeleteServer mocks base method.
func (m *MockCompute) DeleteServer(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServer", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServer indicates an expected call of DeleteServer.
func (mr *MockComputeMockRecorder) DeleteServer(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockCompute)(nil).DeleteServer), id)
}

// FlavorIDFromName mocks base method.
func (m *MockCompute) FlavorIDFromName(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlavorIDFromName", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlavorIDFromName indicates an expected call of FlavorIDFromName.
func (mr *MockComputeMockRecorder) FlavorIDFromName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlavorIDFromName", reflect.TypeOf((*MockCompute)(nil).FlavorIDFromName), name)
}

// GetServer mocks base method.
func (m *MockCompute) GetServer(id string) (*servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", id)
	ret0, _ := ret[0].(*servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer.
func (mr *MockComputeMockRecorder) GetServer(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockCompute)(nil).GetServer), id)
}

// ImageIDFromName mocks base method.
func (m *MockCompute) ImageIDFromName(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageIDFromName", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageIDFromName indicates an expected call of ImageIDFromName.
func (mr *MockComputeMockRecorder) ImageIDFromName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageIDFromName", reflect.TypeOf((*MockCompute)(nil).ImageIDFromName), name)
}

// ListServers mocks base method.
func (m *MockCompute) ListServers(opts servers.ListOptsBuilder) ([]servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServers", opts)
	ret0, _ := ret[0].([]servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServers indicates an expected call of ListServers.
func (mr *MockComputeMockRecorder) ListServers(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServers", reflect.TypeOf((*MockCompute)(nil).ListServers), opts)
}

// MockNetwork is a mock of Network interface.
type MockNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMockRecorder
	isgomock struct{}
}

// MockNetworkMockRecorder is the mock recorder for MockNetwork.
type MockNetworkMockRecorder struct {
	mock *MockNetwork
}

// NewMockNetwork creates a new mock instance.
func NewMockNetwork(ctrl *gomock.Controller) *MockNetwork {
	mock := &MockNetwork{ctrl: ctrl}
	mock.recorder = &MockNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetwork) EXPECT() *MockNetworkMockRecorder {
	return m.recorder
}

// CreatePort mocks base method.
func (m *MockNetwork) CreatePort(opts ports.CreateOptsBuilder) (*ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePort", opts)
	ret0, _ := ret[0].(*ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePort indicates an expected call of CreatePort.
func (mr *MockNetworkMockRecorder) CreatePort(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePort", reflect.TypeOf((*MockNetwork)(nil).CreatePort), opts)
}

// DeletePort mocks base method.
func (m *MockNetwork) DeletePort(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePort", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePort indicates an expected call of DeletePort.
func (mr *MockNetworkMockRecorder) DeletePort(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePort", reflect.TypeOf((*MockNetwork)(nil).DeletePort), id)
}

// GetSubnet mocks base method.
func (m *MockNetwork) GetSubnet(id string) (*subnets.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnet", id)
	ret0, _ := ret[0].(*subnets.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet.
func (mr *MockNetworkMockRecorder) GetSubnet(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*MockNetwork)(nil).GetSubnet), id)
}

// GroupIDFromName mocks base method.
func (m *MockNetwork) GroupIDFromName(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupIDFromName", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupIDFromName indicates an expected call of GroupIDFromName.
func (mr *MockNetworkMockRecorder) GroupIDFromName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupIDFromName", reflect.TypeOf((*MockNetwork)(nil).GroupIDFromName), name)
}

// ListPorts mocks base method.
func (m *MockNetwork) ListPorts(opts ports.ListOptsBuilder) ([]ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPorts", opts)
	ret0, _ := ret[0].([]ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPorts indicates an expected call of ListPorts.
func (mr *MockNetworkMockRecorder) ListPorts(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPorts", reflect.TypeOf((*MockNetwork)(nil).ListPorts), opts)
}

// NetworkIDFromName mocks base method.
func (m *MockNetwork) NetworkIDFromName(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkIDFromName", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkIDFromName indicates an expected call of NetworkIDFromName.
func (mr *MockNetworkMockRecorder) NetworkIDFromName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkIDFromName", reflect.TypeOf((*MockNetwork)(nil).NetworkIDFromName), name)
}

// PortIDFromName mocks base method.
func (m *MockNetwork) PortIDFromName(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortIDFromName", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortIDFromName indicates an expected call of PortIDFromName.
func (mr *MockNetworkMockRecorder) PortIDFromName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortIDFromName", reflect.TypeOf((*MockNetwork)(nil).PortIDFromName), name)
}

// TagPort mocks base method.
func (m *MockNetwork) TagPort(id string, tags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagPort", id, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagPort indicates an expected call of TagPort.
func (mr *MockNetworkMockRecorder) TagPort(id, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagPort", reflect.TypeOf((*MockNetwork)(nil).TagPort), id, tags)
}

// UpdatePort mocks base method.
func (m *MockNetwork) UpdatePort(id string, opts ports.UpdateOptsBuilder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePort", id, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePort indicates an expected call of UpdatePort.
func (mr *MockNetworkMockRecorder) UpdatePort(id, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePort", reflect.TypeOf((*MockNetwork)(nil).UpdatePort), id, opts)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateVolume mocks base method.
func (m *MockStorage) CreateVolume(opts volumes.CreateOptsBuilder) (*volumes.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", opts)
	ret0, _ := ret[0].(*volumes.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockStorageMockRecorder) CreateVolume(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockStorage)(nil).CreateVolume), opts)
}

// DeleteVolume mocks base method.
func (m *MockStorage) DeleteVolume(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockStorageMockRecorder) DeleteVolume(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockStorage)(nil).DeleteVolume), id)
}

// GetVolume mocks base method.
func (m *MockStorage) GetVolume(id string) (*volumes.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", id)
	ret0, _ := ret[0].(*volumes.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockStorageMockRecorder) GetVolume(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockStorage)(nil).GetVolume), id)
}

// ListVolumes mocks base method.
func (m *MockStorage) ListVolumes(opts volumes.ListOptsBuilder) ([]volumes.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes", opts)
	ret0, _ := ret[0].([]volumes.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockStorageMockRecorder) ListVolumes(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockStorage)(nil).ListVolumes), opts)
}

// VolumeIDFromName mocks base method.
func (m *MockStorage) VolumeIDFromName(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeIDFromName", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeIDFromName indicates an expected call of VolumeIDFromName.
func (mr *MockStorageMockRecorder) VolumeIDFromName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeIDFromName", reflect.TypeOf((*MockStorage)(nil).VolumeIDFromName), name)
}
